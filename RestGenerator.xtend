/*
 * generated by Xtext
 */
package at.westreicher.rest.generator

import at.westreicher.rest.rest.Entity
import at.westreicher.rest.rest.Operation
import at.westreicher.rest.rest.Ressource
import at.westreicher.rest.rest.Type
import java.util.List
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator

import static extension org.eclipse.xtext.EcoreUtil2.*
import at.westreicher.rest.rest.User
import java.util.ArrayList
import at.westreicher.rest.rest.Command
import org.eclipse.emf.common.util.EList

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class RestGenerator implements IGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		val name = resource.normalizedURI.lastSegment.replace('.rest', '')
		fsa.generateFile('package.json', getPackageJson(name))
		val ressources = resource.allContents.filter(typeof(Ressource)).toList
		val entities = resource.allContents.filter(typeof(Entity)).toList
		val users = resource.allContents.filter(typeof(User)).toList
		fsa.generateFile('swagger.json', getSwagger(name, ressources, entities))
		fsa.generateFile('server.js', getServer(ressources))
		for (Ressource r : ressources)
			fsa.generateFile('ressources/' + r.name + '.js', getRessource(r, users))
		for (Entity e : entities)
			fsa.generateFile('validation/' + e.name + '.js', getValidation(e))
	}

	def getSwagger(String name, List<Ressource> ressources, List<Entity> entities) {
		'''
			{
				"swagger":"2.0",
				"basePath":"/",
				"schemes": ["http"],
				"host": "localhost:8080",
				"info": {
					"title":"«name»",
					"description":"An automagically generated swagger.io file",
					"version":"1.0.0"
				},
				"securityDefinitions":{
					"remoteuser":{
						"type":"apiKey",
						"name":"REMOTE_USER",
						"in":"header"
					}
				},
				"paths":{
					«FOR r : ressources»
						"«r.path»": {
							«val globCmds = getGlobCommands(r.commands)»
							«FOR c : globCmds»
								"«getMethod(c.op)»": {
									"tags":["«r.name»"],
									«IF c.op==Operation.CREATE»
										"consumes": ["application/json"],
									«ENDIF»
									"parameters":[
										«IF c.op==Operation.CREATE»
											{
												"in": "body",
												"name": "body",
												"schema": {
													"$ref": "#/definitions/«r.entity.name»"
												}
											}
										«ENDIF»
										«IF c.user!=null»
											«IF c.op==Operation.CREATE»,«ENDIF»
											{
												"name": "REMOTE_USER",
												"in": "header",
												"required": true,
												"type": "string"
											}
										«ENDIF»
									],
									"produces": ["application/json"],
									"responses":{
										"«getStatusCode(c.op)»":{
											"description": "valid operation",
											"schema": {
												«IF c.op==Operation.CREATE»
													"$ref": "#/definitions/«r.entity.name»"
												«ELSE»
													"type": "array",
													"items": {
														"$ref": "#/definitions/«r.entity.name»"
													}
												«ENDIF»
											}
										},
										"400":{
											"description": "invalid operation"
										}
									}
									«addSecurity(c)»
								}«IF c!=globCmds.get(globCmds.size-1)»,«ENDIF»
							«ENDFOR»
						},
						"«r.path»/{id}": {
							«val idCmds = getIDCommands(r.commands)»
							«FOR c : idCmds»
								"«getMethod(c.op)»": {
									"tags":["«r.name»"],
									«IF c.op==Operation.UPDATE»
										"consumes": ["application/json"],
										"produces": ["application/json"],
									«ELSEIF c.op==Operation.READ»
										"produces": ["application/json"],
									«ENDIF»
									"parameters":[
										{
											"name": "id",
											"in": "path",
											"type": "integer",
											"required": true
										}
										«IF c.op==Operation.UPDATE»
											,{
												"name": "body",
												"in": "body",
												"schema": {
													"$ref": "#/definitions/«r.entity.name»"
												}
											}
										«ENDIF»
										«IF c.user!=null»
											,{
												"name": "REMOTE_USER",
												"in": "header",
												"required": true,
												"type": "string"
											}
										«ENDIF»
									],
									"responses":{
										"«getStatusCode(c.op)»":{
											"description": "valid operation",
											"schema": {
												"$ref": "#/definitions/«r.entity.name»"
											}
										},
										"400":{
											"description": "invalid operation"
										}
									}
									«addSecurity(c)»
								}«IF c!=idCmds.get(idCmds.size-1)»,«ENDIF»
							«ENDFOR»
						}«IF r!=ressources.get(ressources.size-1)»,«ENDIF»
					«ENDFOR»
				},
				"definitions":{
					«FOR e : entities»
						"«e.name»":{
							"type": "object",
							"properties":{
								«FOR p:e.props»
									"«p.name»":{
										"type": "«p.type.getName.toLowerCase»"
									}«IF p!=e.props.get(e.props.size-1)»,«ENDIF»
								«ENDFOR»
								
							}
						}«IF e!=entities.get(entities.size-1)»,«ENDIF»
					«ENDFOR»
				}
			}
		'''
	}

	def addSecurity(Command command) {
		if (command.user == null)
			return ''
		return ''',"security": [{
	"remoteuser":[]
}]
		'''
	}

	def getGlobCommands(EList<Command> list) {
		var ops = new ArrayList<Command>();
		for (Command c : list)
			if (c.op == Operation.CREATE || c.op == Operation.READ)
				ops.add(c);
		return ops;
	}

	def getIDCommands(EList<Command> list) {
		var ops = new ArrayList<Command>();
		for (Command c : list)
			if (c.op == Operation.UPDATE || c.op == Operation.READ || c.op == Operation.DELETE)
				ops.add(c);
		return ops;
	}

	def getStatusCode(Operation command) {
		switch (command) {
			case CREATE:
				return "201"
			case READ:
				return "200"
			case UPDATE:
				return "200"
			case DELETE:
				return "200"
		}
	}

	def getMethod(Operation command) {
		switch (command) {
			case CREATE:
				return "post"
			case READ:
				return "get"
			case UPDATE:
				return "put"
			case DELETE:
				return "delete"
		}
	}

	def getValidation(Entity entity) {
		'''
			var Joi = require('joi');
			var schema = Joi.object().keys({
				id:	Joi.number().integer(),
				«FOR p : entity.props»
					«IF p.entity==null»
						«p.name»: Joi.«typeToJoi(p.type)»,
					«ELSE»
						«p.name»: require('./«p.entity.name».js').schema,
					«ENDIF»
				«ENDFOR»
			});
			function validate(obj){
				console.log(obj);
				var result = Joi.validate(obj,schema);
				if(result.error===null){
					console.log('valid');
					return true;
				}else{
					console.log('not valid');
					console.log(result.error);
					return false;
				}
			}
			module.exports = {val:validate,schema:schema};
		'''
	}

	def typeToJoi(Type t) {
		switch (t) {
			case BOOLEAN:
				return 'boolean()'
			case STRING:
				return 'string()'
			case INTEGER:
				return 'number().integer()'
		}
	}

	def getRessource(Ressource r, List<User> users) {
		'''
			var express = require('express');
			var validate = require('../validation/«r.entity.name»').val;
			
			function cors(req,res){
				var origin = req.headers.origin;
				res.setHeader('Access-Control-Allow-Origin', origin);
				res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE, CLICK');
				res.setHeader('Access-Control-Allow-Headers', 'X-HTTP-Method-Override,X-Requested-With,content-type,REMOTE_USER');
				res.setHeader('Access-Control-Allow-Credentials', true);
			}
			
			var router = express.Router();
			var dbarr = [];
			var name = '«r.entity.name»';
			
			function getIndex(id){
				var index = -1;
				for(var i=0;i<dbarr.length;i++){
					if(dbarr[i].id == id){
						index = i;
						break;
					}
				}
				return index;
			}
			«FOR c : r.commands»
				«IF c.op==Operation.READ»
					router.get('/', function(req, res, next) {
						console.log('list all '+name+'s');
						cors(req,res);
						«insertSecurity(c.user,users)»
						res.json(dbarr);
					});
					router.get('/:id', function(req, res, next) {
						var id = req.param('id');
						console.log('getting '+name,id);
						var index = getIndex(id);
						cors(req,res);
						«insertSecurity(c.user,users)»
						if(index>=0){
							console.log('success');
							res.json(dbarr[index]);
						}else{
							var errText = 'Couldn\'t find '+name+' with id '+id;
							console.log(errText);
							res.status(400).send({ error: errText});
						}
					});
				«ENDIF»
				«IF c.op==Operation.CREATE»
					router.post('/', function(req, res, next) {
						var entity = req.body;
						entity.id = Date.now();
						console.log('create '+name,entity);
						cors(req,res);
						«insertSecurity(c.user,users)»
						if(validate(entity)){
							dbarr.push(entity);
							console.log('success');
							res.status(201).json(entity);
						}else{
							console.log('not valid');
							res.status(400).json({ error: 'not a valid '+name,entity:entity});
						}
					});
				«ENDIF»
				«IF c.op==Operation.UPDATE»
					router.put('/:id', function(req, res, next) {
						var id = req.param('id');
						var entity = req.body;
						console.log('update '+name,id,'with',entity);
						entity.id = id;
						var index = getIndex(entity.id);
						cors(req,res);
						«insertSecurity(c.user,users)»
						var errText = null;
						if(!validate(entity)){
							errText = 'not a valid '+name;
						}else if(index<0){
							errText = 'Couldn\'t find '+name+' with id '+id;
						}
						if(errText==null){
							dbarr[index] = entity;
							console.log('success');
							res.json(entity);
						}else{
							console.log(errText);
							res.status(400).send({ error: errText});
						}
					});
				«ENDIF»
				«IF c.op==Operation.DELETE»
					router.delete('/:id', function(req, res, next) {
						var id = req.param('id');
						console.log('delete '+name,id);
						var index = getIndex(id);
						cors(req,res);
						«insertSecurity(c.user,users)»
						if(index>=0){
							var deleted = dbarr.splice(index,1);
							console.log('success');
							res.json(deleted);
						}else{
							var errText = 'Couldn\'t find '+name+' with id '+id;
							console.log(errText);
							res.status(400).send({ error: errText});
						}
					});
				«ENDIF»
			«ENDFOR»
			router.options('/:id', function(req, res, next) {
				cors(req,res);
				res.json(null);
			});
			router.options('/', function(req, res, next) {
				cors(req,res);
				res.json(null);
			});
			
			module.exports = router;
		'''
	}

	def insertSecurity(User user, List<User> users) {
		if (user == null)
			return ''
		val allowedUsers = new ArrayList<User>();
		allowedUsers.add(user);
		var change = true;
		while (change) {
			change = false;
			for (User u : users) {
				if (allowedUsers.contains(u.parent) && !allowedUsers.contains(u)) {
					allowedUsers.add(u);
					change = true;
				}
			}
		}
		val allowedNames = new ArrayList<String>();
		var String returnCode = "var user = req.headers['remote_user'];\nif("
		var int index = 0;
		for (User allowedUser : allowedUsers) {
			allowedNames.add(allowedUser.name);
			returnCode += "user!='" + allowedUser.name + "'";
			if (index++ < allowedUsers.size - 1)
				returnCode += "&&";
		}
		returnCode += '''){
	console.log(user+' has no permission to do this action, only «allowedNames.toString()» have');
	res.status(550).send({ error: 'You don\'t have permissions to access this ressource'});
	return;
}'''
		return returnCode;
	}

	def getServer(List<Ressource> ress) {
		'''
			var express = require('express');
			var bodyParser = require('body-parser');
			
			var app = express();
			app.use(bodyParser.json());
			app.use(bodyParser.urlencoded({ extended: false }));
			«FOR r : ress»
				console.log('Adding ressource «r.path»');
				app.use('«r.path»',require('./ressources/«r.name»'));
			«ENDFOR»
			console.log('Starting REST server on localhost:8080');
			app.listen(8080);
			
			module.exports = app;
		'''
	}

	def getPackageJson(String name) {
		'''
			{
			  "name": "«name»",
			  "version": "0.0.0",
			  "private": true,
			  "dependencies": {
				"body-parser": "~1.8.1",
				"joi": "~6.4.2",
				"express": "~4.9.0"
				 }
			}
		'''
	}
}
